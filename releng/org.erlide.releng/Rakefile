require File.join(File.dirname(__FILE__), 'erlide')
require 'pathname'

task :default => [:'run-tests']

desc "compile and run test"
task :run_tests, [:tools_dir] do |t, args|
  args.with_defaults(:tools_dir => "#{ENV['HOME']}/erlide_tools")
  puts "Compile and run tests"

  PDE.run_ant("org.erlide.releng/build.ant", "run.tests")
end

desc "create update site"
task :build_p2, [:tools_dir] do |t, args|
  args.with_defaults(:tools_dir => "#{ENV['HOME']}/erlide_tools")
  puts "Building p2"

  PDE.run_ant("org.erlide.releng/build.ant", "build.p2")
end

desc "create product"
task :build_product, [:tools_dir] do |t, args|
  args.with_defaults(:tools_dir => "#{ENV['HOME']}/erlide_tools")
  puts "Building product"

  PDE.run_ant("org.erlide.releng/build.ant", "build.product")
end

desc "upload update site to servers"
task :publish_site, [:branch] do |t, args|
  args.with_defaults(:branch => "pu")

  output_base = ENV['output_base']
  source_dir = Erlide.workspace_dir + "buildroot/buckminster.output/org.erlide.site_1.0.0-eclipse.feature/site.p2"

  Erlide.publish_site source_dir, args.branch, output_base
end

desc "upload product to servers"
task :publish_product do
  puts "Publishing product"

end

desc "tag a release in git repo"
task :tag_release do
  puts "Creating release"

end

desc "create github release and upload zipped update site"
task :make_github_release, [:file, :description, :tools_dir] do |t, args|
  args.with_defaults(:tools_dir => "#{ENV['HOME']}/erlide_tools", :description => nil)

  filename = Pathname(file).basename.to_s
  version = /^erlide_([^_]+)(_([^\.]+))?.zip$/.match(filename)[1]
  tag = "v#{version}"
  description = tag unless description.nil?
  draft = "--draft"

  puts "Creating Github release"
    cmds = "#{tools_dir}/github_rel release -u erlide -r erlide -t #{tag} -d #{description} #{draft}"
    puts cmds
    system cmds
    if $?.exitstatus > 0 then
      raise "build failed"
    end

  puts "Uploading update site"
    cmds = "#{tools_dir}/github_rel upload -u erlide -r erlide -t #{tag} -n erlide.zip -f #{file} "
    puts cmds
    system cmds
    if $?.exitstatus > 0 then
      raise "build failed"
    end

end

desc "build help"
task :build_help do
  system "bash -c 'org.erlide.help/gen_eclipse_help.sh'"
end

desc "publish help to erlide.github.io"
task :publish_help do
  dest = "buildroot/erlide.github.io"
  system "bash -c 'rm -rf #{dest} && mkdir -p #{dest}'"
  system "bash -c 'git clone --depth 1 git@github.com:erlide/erlide.github.io -b master #{dest}'"
  system "bash -c 'cp -R org.erlide.help/articles/* #{dest}/articles/eclipse'"
  system "bash -cx 'cd #{dest} && git add . && git commit -a -m \"autoupdate eclipse docs\" && git push origin master'"
end

desc "publish help to erlide.github.io"
task :publish_help do
  dest = "buildroot/erlide.github.io"
  system "bash -c 'rm -rf #{dest} && mkdir -p #{dest}'"
  system "bash -c 'git clone --depth 1 git@github.com:erlide/erlide.github.io -b master #{dest}'"
  system "bash -c 'cp -R org.erlide.help/articles/* #{dest}/articles/eclipse'"
  system "bash -cx 'cd #{dest} && git add . && git commit -a -m \"autoupdate eclipse docs\" && git push origin master'"
end
